// 386 support

defn acidinit()			// Called after all the init modules are loaded
{
	bpl = {};
	bpid = -1;
	bpfmt = 'b';

	srcpath = {
		"./",
	};

	nopstop = 0;
	srcfiles = {};			// list of loaded files
	srctext = {};			// the text of the files
	Labspoff = 4;		// adjustment to Label's sp
	Labpcoff = 0;		// adjustment to Label's pc
}

defn linkreg(addr)
{
	return 0;
}

defn stk()				// trace
{
	_stk(*PC, *SP, 0, 0);
}

defn lstk()				// trace with locals
{
	_stk(*PC, *SP, 0, 1);
}

defn kstk()				// kernel stack
{
	_stk(*PC, *SP, 0, 0);
}

defn lkstk()				// kernel stack and locals
{
	_stk(*PC, *SP, 0, 1);
}

defn pstk(argpid)
{
	cmn_pstk(argpid, 0);
}

defn lpstk(argpid)
{
	cmn_pstk(argpid, 1);
}

defn cmn_pstk(argpid, l)
{
	local p;

	p = getproc(argpid);
	if p != 0 then {
		complex Proc p;

		_stk(p.sched.pc+Labpcoff, p.sched.sp+Labspoff, 0, l);
	}
}

defn gpr()		// print general(hah hah!) purpose registers
{
	print("AX\t", *AX, " BX\t", *BX, " CX\t", *CX, " DX\t", *DX, "\n");
	print("DI\t", *DI, " SI\t", *SI, " BP\t", *BP, "\n");
}

defn spr()				// print special processor registers
{
	local pc;
	local cause;

	pc = *PC;
	print("PC\t", pc, " ", fmt(pc, 'a'), "  ");
	pfl(pc);
	print("SP\t", *SP, " ECODE ", *ECODE, " EFLAG ", *EFLAGS, "\n");
	print("CS\t", *CS, " DS\t ", *DS, " SS\t", *SS, "\n");
	print("GS\t", *GS, " FS\t ", *FS, " ES\t", *ES, "\n");
	
	cause = *TRAP;
	print("TRAP\t", cause, " ", reason(cause), "\n");
}

defn regs()				// print all registers
{
	spr();
	gpr();
}

defn step()
{
	local ur;
	local addrs;
	local id;
	local l;
	local b;
	local bl;
	local sl;
	local pc;

	complex Proc proc;
	ur = proc.dbgreg;
	if ur == 0 then
		error("step: process not in breakpoint trap");
	complex Ureg ur;

	 //
	 // stop all kprocs that could potentially hit this breakpoint
	 // make a list of all the breakpoints at this address
	 //
	bl = {};
	sl = {};
	l = bpl;

	while l do {
		b = head l;
		if ((b[2] & *PC) == b[2]) then {
			if status(b[1]) != "Stopped" then {
				stop(b[1]);
				sl = append sl, b[1];
			}
			bl = append bl, b;
		}
		l = tail l;
	}

	 //
	 // delete all the breakpoints at this address
	 //
	if bl then {
		l = bl;
		while l do {
			b = head l;
			_bpconddel(b[0]);
			l = tail l;
		}
	}

	 //
	 // single step to the following address
	 //
	addrs = follow(*PC);
	id = bpset(addrs[0]);
	startstop(pid);
	bpdel(id);

	 //
	 // restore all the breakpoints at this address
	 //
	if bl then {
		l = bl;
		while l do {
			b = head l;
			_bpcondset(b[0], b[1], b[2], b[3]);
			l = tail l;
		}
	}

	 //
	 // restart all kprocs that could potentially hit this breakpoint
	 //
	if sl then {
		l = sl;
		while l do {
			start(head l);
			l = tail l;
		}
	}
}

print("/sys/lib/acid/386");
